name: Publish App Demo (Image and Helm Chart)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag both image and chart with (e.g. 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-app-demo
  OWNER: ${{ github.repository_owner }}
  CHART_NAME: app-demo

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.inputs.version }}
            type=semver,pattern={{major}},value=${{ github.event.inputs.version }}
            type=raw,value=latest,enable=${{ github.event.inputs.prerelease != 'true' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app-demo
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_NUMBER=${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-helm-chart:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Update chart version and image reference
        run: |
          # Update the Chart.yaml version field
          sed -i "s/^version: .*/version: ${{ github.event.inputs.version }}/" helm-chart/Chart.yaml
          
          # Update the Chart.yaml appVersion field to match
          sed -i "s/^appVersion: .*/appVersion: \"${{ github.event.inputs.version }}\"/" helm-chart/Chart.yaml
          
          # Update values.yaml to point to the new image and version
          # Update repository to point to GitHub Container Registry
          sed -i "s|repository: .*|repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}/$(echo ${{ github.repository }} | cut -d '/' -f 2)-app-demo|" helm-chart/values.yaml
          
          # Update tag to use the specified version
          sed -i "s/tag: .*/tag: \"${{ github.event.inputs.version }}\"/" helm-chart/values.yaml
          
          # Display the updated Chart.yaml
          echo "Updated Chart.yaml:"
          cat helm-chart/Chart.yaml
          
          # Display values.yaml
          echo "Updated values.yaml:"
          cat helm-chart/values.yaml

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package Helm chart
        run: |
          mkdir -p .cr-release-packages
          helm package helm-chart --destination .cr-release-packages

      - name: Push Helm chart
        run: |
          echo "Logging into Helm registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }}/${{ env.OWNER }} --username ${{ github.actor }} --password-stdin
          
          echo "Pushing chart to registry..."
          helm push .cr-release-packages/app-demo-${{ github.event.inputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ env.OWNER }}
          
          echo "Chart published successfully!"